/*
 * DS1775.c
 *
 *  Created on: May 8, 2020
 *      Author: ERCAN
 */

#include <ds1775.h>


DS1775_Result DS1775_Init(I2C_HandleTypeDef *pI2Cx, D1775_Config *pConfig, DS1775_Mode Mode, DS1775_Resolution Res, DS1775_Fault_Tolerance Fault)
{
	//Configuration register address
	uint8_t temp = (uint8_t)CONFIGURATION;

	//Thermostat Mode (comparator or interrupt mode)
	temp |= Mode << pConfig->F.TM;

	//Thermometer resolution bits
	temp |= Res << pConfig->F.R0R1;

	//if O.S. output is high Fault tolerance bits
	if(temp & pConfig->F.POL)
	temp |= Fault << pConfig->F.R0R1;

	pConfig->Status = temp;

	return DS1775_Result_Ok;

}






















void DS1775_ReadTempature(I2C_HandleTypeDef *hi2c, uint16_t DS1775_ADDR)
{

	uint16_t temperature;
	uint8_t resolution;
	int8_t digit, minus = 0;
	uint8_t data[2];
	float decimal;

	while (HAL_I2C_Master_Transmit(hi2c, DS1775_ADDR, TEMPERATURE, 1, 1000) != HAL_OK);

	while (HAL_I2C_Master_Receive(hi2c, DS1775_ADDR, data, 2, 1000) != HAL_OK);

	temperature = data;
	//check if temperature is negative
	if(temperature & 0x8000){

		temperature = ~temperature + 1;
		minus = 1;
	}

	//resolution =




	//2's complement
	/*if((pData->temp>>15 & 1) == 1){

		for(int i=7; i>=0; i--){
			if((pData->temp>>i & 1) == 0){

				pData->temp |= 1 << (i);
				break;
			}
			else
				pData->temp &=~(1 << i);*/

}


